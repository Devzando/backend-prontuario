using prontuario.Application.Factories;
using prontuario.Domain.Entities.Address;
using prontuario.Domain.Entities.Anamnese;
using prontuario.Domain.Entities.EmergencyContactDetails;
using prontuario.Domain.Entities.MedicalRecord;
using prontuario.Domain.Entities.Patient;
using prontuario.Domain.Entities.Service;
using prontuario.Domain.ValuesObjects;
using prontuario.Infra.Database.SqLite.EntityFramework.Models.Address;
using prontuario.Infra.Database.SqLite.EntityFramework.Models.Anamnese;
using prontuario.Infra.Database.SqLite.EntityFramework.Models.EmergencyContactDetails;
using prontuario.Infra.Database.SqLite.EntityFramework.Models.MedicalRecord;
using prontuario.Infra.Database.SqLite.EntityFramework.Models.Patient;
using prontuario.Infra.Database.SqLite.EntityFramework.Models.Service;

namespace prontuario.Infra.Gateways.Mappers;

public class ServiceMapper
{
    public static ServiceModel ToModel(ServiceEntity service)
    {
        return new ServiceModelBuilder()
            .WithServiceDate(service.ServiceDate)
            .WithPatient(new PatientModelBuilder()
                .WithId(service.PatientEntity.Id)
                .WithName(service.PatientEntity.Name)
                .WithSocialName(service.PatientEntity.SocialName)
                .WithBirthDate(service.PatientEntity.BirthDate)
                .WithSus(service.PatientEntity.Sus?.Value)
                .WithCpf(service.PatientEntity.Cpf.Value)
                .WithRg(service.PatientEntity.Rg?.Value)
                .WithPhone(service.PatientEntity.Phone?.Value)
                .WithMotherName(service.PatientEntity.MotherName)
                .WithStatus(service.PatientEntity.Status?.Value)
                .WithAddress(new AddressModelBuilder()
                    .WithId(service.PatientEntity.AddressEntity.Id)
                    .WithCep(service.PatientEntity.AddressEntity.Cep?.Value)
                    .WithCity(service.PatientEntity.AddressEntity.City)
                    .WithStreet(service.PatientEntity.AddressEntity.Street)
                    .WithNumber(service.PatientEntity.AddressEntity.Number)
                    .WithNeighborhood(service.PatientEntity.AddressEntity.Neighborhood)
                    .Build())
                .WithEmergencyContactDetails(new EmergencyContactDetailsModelBuilder()
                    .WithId(service.PatientEntity.EmergencyContactDetailsEntity.Id)
                    .WithName(service.PatientEntity.EmergencyContactDetailsEntity.Name)
                    .WithPhone(service.PatientEntity.EmergencyContactDetailsEntity.Phone?.Value)
                    .WithRelationship(service.PatientEntity.EmergencyContactDetailsEntity.Relationship?.Value)
                    .Build())
                .Build())
            .WithMedicalRecordModel(new MedicalRecordModelBuilder()
                .WithStatus(service.MedicalRecordEntity!.Status.Value)
                .WithStatusInCaseOfAdmission(service.MedicalRecordEntity.StatusInCaseOfAdmission?.Value)
                .WithAnamnese(new AnamneseModelBuilder()
                    .WithAllergies(service.MedicalRecordEntity.Anamnese.Allergies)
                    .WithDiabetes(service.MedicalRecordEntity.Anamnese.Diabetes)
                    .WithGlucose(service.MedicalRecordEntity.Anamnese.Glucose)
                    .WithHeight(service.MedicalRecordEntity.Anamnese.Height)
                    .WithSaturation(service.MedicalRecordEntity.Anamnese.Saturation)
                    .WithTemperature(service.MedicalRecordEntity.Anamnese.Temperature)
                    .WithWeight(service.MedicalRecordEntity.Anamnese.Weight)
                    .WithAllergiesType(service.MedicalRecordEntity.Anamnese.AllergiesType)
                    .WithAntecPathological(service.MedicalRecordEntity.Anamnese.AntecPathological)
                    .WithBloodPressure(service.MedicalRecordEntity.Anamnese.BloodPressure)
                    .WithBloodType(service.MedicalRecordEntity.Anamnese.BloodType)
                    .WithClassificationStatus(service.MedicalRecordEntity.Anamnese.ClassificationStatus.Value)
                    .WithHeartRate(service.MedicalRecordEntity.Anamnese.HeartRate)
                    .WithMedicalHypothesis(service.MedicalRecordEntity.Anamnese.MedicalHypothesis)
                    .WithNecesPsicobio(service.MedicalRecordEntity.Anamnese.NecesPsicobio)
                    .WithPreviousSurgeries(service.MedicalRecordEntity.Anamnese.PreviousSurgeries)
                    .WithRespiratoryRate(service.MedicalRecordEntity.Anamnese.RespiratoryRate)
                    .WithAntecPathologicalType(service.MedicalRecordEntity.Anamnese.AntecPathologicalType)
                    .WithMedicationsInUse(service.MedicalRecordEntity.Anamnese.MedicationsInUse)
                    .WithUseOfProthesis(service.MedicalRecordEntity.Anamnese.UseOfProthesis)
                    .WithMedicationInUseType(service.MedicalRecordEntity.Anamnese.MedicationInUseType)
                    .Build())
                .Build())
            .Build();
    } 
    public static ServiceModel ToModelWithoutMedicalRecord(ServiceEntity service)
    {
        return new ServiceModelBuilder()
            .WithServiceDate(service.ServiceDate)
            .WithPatient(new PatientModelBuilder()
                .WithId(service.PatientEntity.Id)
                .WithName(service.PatientEntity.Name)
                .WithSocialName(service.PatientEntity.SocialName)
                .WithBirthDate(service.PatientEntity.BirthDate)
                .WithSus(service.PatientEntity.Sus?.Value)
                .WithCpf(service.PatientEntity.Cpf.Value)
                .WithRg(service.PatientEntity.Rg?.Value)
                .WithPhone(service.PatientEntity.Phone?.Value)
                .WithMotherName(service.PatientEntity.MotherName)
                .WithStatus(service.PatientEntity.Status?.Value)
                .WithAddress(new AddressModelBuilder()
                    .WithId(service.PatientEntity.AddressEntity.Id)
                    .WithCep(service.PatientEntity.AddressEntity.Cep?.Value)
                    .WithCity(service.PatientEntity.AddressEntity.City)
                    .WithStreet(service.PatientEntity.AddressEntity.Street)
                    .WithNumber(service.PatientEntity.AddressEntity.Number)
                    .WithNeighborhood(service.PatientEntity.AddressEntity.Neighborhood)
                    .Build())
                .WithEmergencyContactDetails(new EmergencyContactDetailsModelBuilder()
                    .WithId(service.PatientEntity.EmergencyContactDetailsEntity.Id)
                    .WithName(service.PatientEntity.EmergencyContactDetailsEntity.Name)
                    .WithPhone(service.PatientEntity.EmergencyContactDetailsEntity.Phone?.Value)
                    .WithRelationship(service.PatientEntity.EmergencyContactDetailsEntity.Relationship?.Value)
                    .Build())
                .Build())
            .Build();
    }

    public static ServiceEntity ToEntity(ServiceModel service)
    {
        return new ServiceEntityBuilder()
            .WithId(service.Id)
            .WithServiceDate(service.ServiceDate)
            .WithPatient(new PatientEntityBuilder()
                .WithId(service.PatientModel.Id)
                .WithName(service.PatientModel.Name)
                .WithSocialName(service.PatientModel.SocialName)
                .WithBirthDate(service.PatientModel.BirthDate)
                .WithSus(new SUS(service.PatientModel.Sus))
                .WithCpf(new CPF(service.PatientModel.Cpf))
                .WithRg(new RG(service.PatientModel.Rg))
                .WithPhone(new Phone(service.PatientModel.Phone))
                .WithMotherName(service.PatientModel.MotherName)
                .WithStatus(new PatientStatus(service.PatientModel.Status))
                .WithAddress(new AddressEntityBuilder()
                    .WithId(service.PatientModel.AddressModel.Id)
                    .WithCep(new CEP(service.PatientModel.AddressModel.Cep))
                    .WithCity(service.PatientModel.AddressModel.City)
                    .WithStreet(service.PatientModel.AddressModel.Street)
                    .WithNumber(service.PatientModel.AddressModel.Number)
                    .WithNeighborhood(service.PatientModel.AddressModel.Neighborhood)
                    .Build())
                .WithEmergencyContactDetails(new EmergencyContactDetailsEntityBuilder()
                    .WithId(service.PatientModel.EmergencyContactDetailsModel.Id)
                    .WithName(service.PatientModel.EmergencyContactDetailsModel.Name)
                    .WithPhone(new Phone(service.PatientModel.EmergencyContactDetailsModel.Phone))
                    .WithRelationship(new Relationship(service.PatientModel.EmergencyContactDetailsModel.Relationship))
                    .Build())
                .Build())
            .WithMedicalRecordEntity(new MedicalRecordEntityBuilder()
                .WithId(service.MedicalRecordModel!.Id)
                .WithStatus(new MedicalRecordStatus(service.MedicalRecordModel.Status))
                .WithStatusInCaseOfAdmission(new MedicalRecordStatus(service.MedicalRecordModel.StatusInCaseOfAdmission!))
                .WithAnamnese(new AnamneseEntityBuilder()
                    .WithId(service.MedicalRecordModel.Anamnese.Id)
                    .WithAllergies(service.MedicalRecordModel.Anamnese.Allergies)
                    .WithDiabetes(service.MedicalRecordModel.Anamnese.Diabetes)
                    .WithGlucose(service.MedicalRecordModel.Anamnese.Glucose)
                    .WithHeight(service.MedicalRecordModel.Anamnese.Height)
                    .WithSaturation(service.MedicalRecordModel.Anamnese.Saturation)
                    .WithTemperature(service.MedicalRecordModel.Anamnese.Temperature)
                    .WithWeight(service.MedicalRecordModel.Anamnese.Weight)
                    .WithAllergiesType(service.MedicalRecordModel.Anamnese.AllergiesType)
                    .WithAntecPathological(service.MedicalRecordModel.Anamnese.AntecPathological)
                    .WithBloodPressure(service.MedicalRecordModel.Anamnese.BloodPressure)
                    .WithBloodType(service.MedicalRecordModel.Anamnese.BloodType)
                    .WithClassificationStatus(new ClassificationStatus(service.MedicalRecordModel.Anamnese.ClassificationStatus))
                    .WithHeartRate(service.MedicalRecordModel.Anamnese.HeartRate)
                    .WithMedicalHypothesis(service.MedicalRecordModel.Anamnese.MedicalHypothesis)
                    .WithNecesPsicobio(service.MedicalRecordModel.Anamnese.NecesPsicobio)
                    .WithPreviousSurgeries(service.MedicalRecordModel.Anamnese.PreviousSurgeries)
                    .WithRespiratoryRate(service.MedicalRecordModel.Anamnese.RespiratoryRate)
                    .WithAntecPathologicalType(service.MedicalRecordModel.Anamnese.AntecPathologicalType)
                    .WithMedicationsInUse(service.MedicalRecordModel.Anamnese.MedicationsInUse)
                    .WithUseOfProthesis(service.MedicalRecordModel.Anamnese.UseOfProthesis)
                    .WithMedicationInUseType(service.MedicalRecordModel.Anamnese.MedicationInUseType)
                    .Build())
                .Build())
            .Build();
    }
}