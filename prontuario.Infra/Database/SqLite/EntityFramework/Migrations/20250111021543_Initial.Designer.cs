// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using prontuario.Infra.Database;

#nullable disable

namespace prontuario.Infra.Database.SqLite.EntityFramework.Migrations
{
    [DbContext(typeof(ProntuarioDbContext))]
    [Migration("20250111021543_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.10");

            modelBuilder.Entity("prontuario.Infra.Database.SqLite.EntityFramework.Models.AccessCode.AccessCodeModel", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExperationDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsUserUpdatePassword")
                        .HasColumnType("INTEGER");

                    b.Property<long>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("AccessCodes");
                });

            modelBuilder.Entity("prontuario.Infra.Database.SqLite.EntityFramework.Models.Address.AddressModel", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Cep")
                        .HasMaxLength(11)
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasMaxLength(60)
                        .HasColumnType("TEXT");

                    b.Property<string>("Neighborhood")
                        .HasMaxLength(40)
                        .HasColumnType("TEXT");

                    b.Property<long?>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<long>("PatientId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Street")
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PatientId")
                        .IsUnique();

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("prontuario.Infra.Database.SqLite.EntityFramework.Models.Anamnese.AnamneseModel", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Allergies")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AllergiesType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("AntecPathological")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AntecPathologicalType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("BloodPressure")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<string>("BloodType")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<string>("ClassificationStatus")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Diabetes")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Glucose")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<string>("HeartRate")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<string>("Height")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<string>("MedicalHypothesis")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<long>("MedicalRecordId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MedicationInUseType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("MedicationsInUse")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("NecesPsicobio")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PreviousSurgeries")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("RespiratoryRate")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<string>("Saturation")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<string>("Temperature")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<bool>("UseOfProthesis")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Weight")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MedicalRecordId")
                        .IsUnique();

                    b.ToTable("Anamneses");
                });

            modelBuilder.Entity("prontuario.Infra.Database.SqLite.EntityFramework.Models.EmergencyContactDetails.EmergencyContactDetailsModel", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<long>("PatientId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<string>("Relationship")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PatientId")
                        .IsUnique();

                    b.ToTable("EmergencyContactDetails");
                });

            modelBuilder.Entity("prontuario.Infra.Database.SqLite.EntityFramework.Models.MedicalRecord.MedicalRecordModel", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ServiceId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("StatusInCaseOfAdmission")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId")
                        .IsUnique();

                    b.ToTable("MedicalRecords");
                });

            modelBuilder.Entity("prontuario.Infra.Database.SqLite.EntityFramework.Models.Patient.PatientModel", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("Date");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<string>("MotherName")
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<string>("Rg")
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<string>("SocialName")
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<string>("Sus")
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("prontuario.Infra.Database.SqLite.EntityFramework.Models.Profile.ProfileModel", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("prontuario.Infra.Database.SqLite.EntityFramework.Models.Service.ServiceModel", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("PatientId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ServiceDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ServiceStatus")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("prontuario.Infra.Database.SqLite.EntityFramework.Models.User.UserModel", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("FirstAccess")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<long>("ProfileId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("prontuario.Infra.Database.SqLite.EntityFramework.Models.AccessCode.AccessCodeModel", b =>
                {
                    b.HasOne("prontuario.Infra.Database.SqLite.EntityFramework.Models.User.UserModel", "User")
                        .WithOne("AccessCode")
                        .HasForeignKey("prontuario.Infra.Database.SqLite.EntityFramework.Models.AccessCode.AccessCodeModel", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("prontuario.Infra.Database.SqLite.EntityFramework.Models.Address.AddressModel", b =>
                {
                    b.HasOne("prontuario.Infra.Database.SqLite.EntityFramework.Models.Patient.PatientModel", "PatientModel")
                        .WithOne("AddressModel")
                        .HasForeignKey("prontuario.Infra.Database.SqLite.EntityFramework.Models.Address.AddressModel", "PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientModel");
                });

            modelBuilder.Entity("prontuario.Infra.Database.SqLite.EntityFramework.Models.Anamnese.AnamneseModel", b =>
                {
                    b.HasOne("prontuario.Infra.Database.SqLite.EntityFramework.Models.MedicalRecord.MedicalRecordModel", "MedicalRecordModel")
                        .WithOne("Anamnese")
                        .HasForeignKey("prontuario.Infra.Database.SqLite.EntityFramework.Models.Anamnese.AnamneseModel", "MedicalRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicalRecordModel");
                });

            modelBuilder.Entity("prontuario.Infra.Database.SqLite.EntityFramework.Models.EmergencyContactDetails.EmergencyContactDetailsModel", b =>
                {
                    b.HasOne("prontuario.Infra.Database.SqLite.EntityFramework.Models.Patient.PatientModel", "PatientModel")
                        .WithOne("EmergencyContactDetailsModel")
                        .HasForeignKey("prontuario.Infra.Database.SqLite.EntityFramework.Models.EmergencyContactDetails.EmergencyContactDetailsModel", "PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientModel");
                });

            modelBuilder.Entity("prontuario.Infra.Database.SqLite.EntityFramework.Models.MedicalRecord.MedicalRecordModel", b =>
                {
                    b.HasOne("prontuario.Infra.Database.SqLite.EntityFramework.Models.Service.ServiceModel", "Service")
                        .WithOne("MedicalRecordModel")
                        .HasForeignKey("prontuario.Infra.Database.SqLite.EntityFramework.Models.MedicalRecord.MedicalRecordModel", "ServiceId");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("prontuario.Infra.Database.SqLite.EntityFramework.Models.Service.ServiceModel", b =>
                {
                    b.HasOne("prontuario.Infra.Database.SqLite.EntityFramework.Models.Patient.PatientModel", "PatientModel")
                        .WithMany("ServicesModel")
                        .HasForeignKey("PatientId");

                    b.Navigation("PatientModel");
                });

            modelBuilder.Entity("prontuario.Infra.Database.SqLite.EntityFramework.Models.User.UserModel", b =>
                {
                    b.HasOne("prontuario.Infra.Database.SqLite.EntityFramework.Models.Profile.ProfileModel", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("prontuario.Infra.Database.SqLite.EntityFramework.Models.MedicalRecord.MedicalRecordModel", b =>
                {
                    b.Navigation("Anamnese")
                        .IsRequired();
                });

            modelBuilder.Entity("prontuario.Infra.Database.SqLite.EntityFramework.Models.Patient.PatientModel", b =>
                {
                    b.Navigation("AddressModel")
                        .IsRequired();

                    b.Navigation("EmergencyContactDetailsModel")
                        .IsRequired();

                    b.Navigation("ServicesModel");
                });

            modelBuilder.Entity("prontuario.Infra.Database.SqLite.EntityFramework.Models.Service.ServiceModel", b =>
                {
                    b.Navigation("MedicalRecordModel");
                });

            modelBuilder.Entity("prontuario.Infra.Database.SqLite.EntityFramework.Models.User.UserModel", b =>
                {
                    b.Navigation("AccessCode")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
